/**
 */
package com.icteam.loyalty.model.interfaces.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.icteam.loyalty.model.interfaces.util.ModelInterfacesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelInterfacesItemProviderAdapterFactory extends ModelInterfacesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier,
IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ModelInterfacesItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link com.icteam.loyalty.model.interfaces.Permission} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PermissionItemProvider permissionItemProvider;

    /**
     * This creates an adapter for a {@link com.icteam.loyalty.model.interfaces.Permission}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPermissionAdapter() {
        if (permissionItemProvider == null) {
            permissionItemProvider = new PermissionItemProvider(this);
        }

        return permissionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.icteam.loyalty.model.interfaces.Status} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StatusItemProvider statusItemProvider;

    /**
     * This creates an adapter for a {@link com.icteam.loyalty.model.interfaces.Status}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStatusAdapter() {
        if (statusItemProvider == null) {
            statusItemProvider = new StatusItemProvider(this);
        }

        return statusItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.icteam.loyalty.model.interfaces.StatusReason} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StatusReasonItemProvider statusReasonItemProvider;

    /**
     * This creates an adapter for a {@link com.icteam.loyalty.model.interfaces.StatusReason}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStatusReasonAdapter() {
        if (statusReasonItemProvider == null) {
            statusReasonItemProvider = new StatusReasonItemProvider(this);
        }

        return statusReasonItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.icteam.loyalty.model.interfaces.Perspective} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PerspectiveItemProvider perspectiveItemProvider;

    /**
     * This creates an adapter for a {@link com.icteam.loyalty.model.interfaces.Perspective}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPerspectiveAdapter() {
        if (perspectiveItemProvider == null) {
            perspectiveItemProvider = new PerspectiveItemProvider(this);
        }

        return perspectiveItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.icteam.loyalty.model.interfaces.Language} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LanguageItemProvider languageItemProvider;

    /**
     * This creates an adapter for a {@link com.icteam.loyalty.model.interfaces.Language}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLanguageAdapter() {
        if (languageItemProvider == null) {
            languageItemProvider = new LanguageItemProvider(this);
        }

        return languageItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link com.icteam.loyalty.model.interfaces.Action} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ActionItemProvider actionItemProvider;

    /**
     * This creates an adapter for a {@link com.icteam.loyalty.model.interfaces.Action}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createActionAdapter() {
        if (actionItemProvider == null) {
            actionItemProvider = new ActionItemProvider(this);
        }

        return actionItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void dispose() {
        if (permissionItemProvider != null) permissionItemProvider.dispose();
        if (statusItemProvider != null) statusItemProvider.dispose();
        if (statusReasonItemProvider != null) statusReasonItemProvider.dispose();
        if (perspectiveItemProvider != null) perspectiveItemProvider.dispose();
        if (languageItemProvider != null) languageItemProvider.dispose();
        if (actionItemProvider != null) actionItemProvider.dispose();
    }

}
